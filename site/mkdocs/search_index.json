{
    "docs": [
        {
            "location": "/", 
            "text": "My personal Software Installation Guides", 
            "title": "Home"
        }, 
        {
            "location": "/#my-personal-software-installation-guides", 
            "text": "", 
            "title": "My personal Software Installation Guides"
        }, 
        {
            "location": "/ubuntu/couchpotato/", 
            "text": "Base Requirements:\n\n\nsudo apt-get install git-core libffi-dev libssl-dev zlib1g-dev libxslt1-dev libxml2-dev python python-pip python-dev build-essential -y\nsudo -H pip install --upgrade lxml cryptography pyopenssl\n\n\n\n\nClone the Repo\n\n\n\n\nNote\n\n\nI keep all of my cloned git repos inside of one, singular directory: \n~/git\n. This way, I don't have to hunt all over my system for where my repo's are and it makes it easier to keep them updated. Then, I link the library to wherever either the developer wants/requires it or where is easiest.\n\n\n\n\ngit clone https://github.com/RuudBurger/CouchPotatoServer ~/git/couchpotato\nsudo ln -s ~/git/couchpotato /opt/couchpotato\n\n\n\n\nThen, make sure that BOTH your \n~/git/couchpotato\n and \n/opt/couchpotato\n locations are under your main user's ownership.\n\n\nsudo chown -R $USER:$USER ~/git/couchpotato\nsudo chown -R $USER:$USER /opt/couchpotato\n\n\n\n\nTest if it works:\n\n\nsudo python /opt/couchpotato/CouchPotato.py\n\n\n\n\nThis will run only as long as you allow it directly inside the terminal, and it will also give each step that the program runs, so you can see if it gives any errors or what else might need to be changed.\n\n\nHit \nCtrl-C\n to quit the program.\n\n\nCopy/Edit Default File\n\n\nNext, copy over the defaut \n/etc/default\n file, and then make any necessary changes.\n\n\nsudo cp /opt/couchpotato/init/ubuntu.default /etc/default/couchpotato\nsudo nano /etc/default/couchpotato\n\n\n\n\nThe below code field is not the entire file, but rather just an excerpt.\n\n\n# COPY THIS FILE TO /etc/default/couchpotato\n# Accepted variables with default values -if any- in parentheses:\n\n# username to run couchpotato under (couchpotato)\nCP_USER= \n your main login \n\n# directory of CouchPotato.py (/opt/couchpotato)\nCP_HOME=/opt/couchpotato\n\n# directory of couchpotato's db, cache and logs (/var/opt/couchpotato)\nCP_DATA=/var/opt/couchpotato\n# full path of couchpotato.pid (/var/run/couchpotato/couchpotato.pid)\nCP_PIDFILE=/var/run/couchpotato/couchpotato.pid\n# full path of the python binary (/usr/bin/python)\nPYTHON_BIN=/usr/bin/python\n\n\n\n\nNext, copy the default CouchPotato init.d file:\n\n\nsudo cp /opt/couchpotato/init/ubuntu /etc/init.d/couchpotato\n\n\n\n\nMake it executable and run on boot\n\n\nsudo chmod +x /etc/init.d/couchpotato\nsudo update-rc.d couchpotato defaults\n\n\n\n\nThen, you can run \nsudo service couchpotato start\n, and access it at \nhttp://127.0.0.1:5050\n\n\n\n\nDirections copied from \nHTPC-Guides", 
            "title": "CouchPotato"
        }, 
        {
            "location": "/ubuntu/couchpotato/#base-requirements", 
            "text": "sudo apt-get install git-core libffi-dev libssl-dev zlib1g-dev libxslt1-dev libxml2-dev python python-pip python-dev build-essential -y\nsudo -H pip install --upgrade lxml cryptography pyopenssl", 
            "title": "Base Requirements:"
        }, 
        {
            "location": "/ubuntu/couchpotato/#clone-the-repo", 
            "text": "Note  I keep all of my cloned git repos inside of one, singular directory:  ~/git . This way, I don't have to hunt all over my system for where my repo's are and it makes it easier to keep them updated. Then, I link the library to wherever either the developer wants/requires it or where is easiest.   git clone https://github.com/RuudBurger/CouchPotatoServer ~/git/couchpotato\nsudo ln -s ~/git/couchpotato /opt/couchpotato  Then, make sure that BOTH your  ~/git/couchpotato  and  /opt/couchpotato  locations are under your main user's ownership.  sudo chown -R $USER:$USER ~/git/couchpotato\nsudo chown -R $USER:$USER /opt/couchpotato", 
            "title": "Clone the Repo"
        }, 
        {
            "location": "/ubuntu/couchpotato/#test-if-it-works", 
            "text": "sudo python /opt/couchpotato/CouchPotato.py  This will run only as long as you allow it directly inside the terminal, and it will also give each step that the program runs, so you can see if it gives any errors or what else might need to be changed.  Hit  Ctrl-C  to quit the program.", 
            "title": "Test if it works:"
        }, 
        {
            "location": "/ubuntu/couchpotato/#copyedit-default-file", 
            "text": "Next, copy over the defaut  /etc/default  file, and then make any necessary changes.  sudo cp /opt/couchpotato/init/ubuntu.default /etc/default/couchpotato\nsudo nano /etc/default/couchpotato  The below code field is not the entire file, but rather just an excerpt.  # COPY THIS FILE TO /etc/default/couchpotato\n# Accepted variables with default values -if any- in parentheses:\n\n# username to run couchpotato under (couchpotato)\nCP_USER=   your main login  \n# directory of CouchPotato.py (/opt/couchpotato)\nCP_HOME=/opt/couchpotato\n\n# directory of couchpotato's db, cache and logs (/var/opt/couchpotato)\nCP_DATA=/var/opt/couchpotato\n# full path of couchpotato.pid (/var/run/couchpotato/couchpotato.pid)\nCP_PIDFILE=/var/run/couchpotato/couchpotato.pid\n# full path of the python binary (/usr/bin/python)\nPYTHON_BIN=/usr/bin/python  Next, copy the default CouchPotato init.d file:  sudo cp /opt/couchpotato/init/ubuntu /etc/init.d/couchpotato  Make it executable and run on boot  sudo chmod +x /etc/init.d/couchpotato\nsudo update-rc.d couchpotato defaults  Then, you can run  sudo service couchpotato start , and access it at  http://127.0.0.1:5050   Directions copied from  HTPC-Guides", 
            "title": "Copy/Edit Default File"
        }, 
        {
            "location": "/ubuntu/ddclient/", 
            "text": "Clone the Github repo\n\n\n\n\nNote\n\n\nI keep all of my cloned git repos inside of one, singular directory: \n~/git\n. This way, I don't have to hunt all over my system for where my repo's are and it makes it easier to keep them updated. Then, I link the library to wherever either the developer wants/requires it or where is easiest.\n\n\n\n\ngit clone https://github.com/wimpunk/ddclient.git ~/git/ddclient\n\n\n\n\nCopying Files and Creating Directories\n\n\nNext, its a matter of sticking the ddclient program into the right place  and creating its directories.\n\n\ncd ~/git/ddclient/\nsudo cp ddclient /usr/sbin/\nsudo mkdir /etc/ddclient/\nsudo mkdir /var/cache/ddclient\n\n\n\n\nddclient.conf\n\n\nIf you already have a \nddclient.conf\n file made, say, using \ndomains.google.com\n's support directions, copy that over to:\n\n\n/etc/ddclient/ddclient.conf\n\n\n\n\nOtherwise, copy over the repo's default \n.conf\n file.\n\n\nsudo nano /etc/ddclient/ddclient.conf\n\n\n\n\nIt doesn't hurt to try to familiarize yourself with the different options. There's a TON of information, so its most likely easier to do one of the following:\n\n\n\n\nFind the specific service you plan to use for your own setup\n\n\nMake a new \nddclient.conf\n file, rename the current one to \nddclient.conf.copy\n and move from there\n\n\n\n\nAutostart\n\n\nNow, copy the \ninit.d\n file over and set it up to \nalways\n run:\n\n\nsudo cp sample-etc_rc.d_init.d_ddclient.ubuntu /etc/init.d/ddclient\nsudo chmod +x /etc/init.d/ddclient\nsudo update-rc.d ddclient defaults\n\n\n\n\nThat sets up the auto-running and registers it as a proper service.\n\n\nPerl/CPAN\n\n\nMake sure you have \ncpan\n installed, that's one of Perl's installation management systems, like \nPip\n or \napt-get\n.\n\n\nwhich cpan\n - when you add \nwhich\n before any program's \ncli\n command, linux responds with where in the directory setup that program file is located. If it doesn't respond, then no program installed.\n\n\nIf no \ncpan\n:\n\n\nsudo apt-get install perl cpan\n\n\n\n\nNext:\n\n\nsudo cpan install Data::Validate::IP\n\n\n\n\nSince I don't know hardly anything about Perl other than I need it, the first question that appears asks:\n\n\n\"Would you like to configure as much as possible automatically? [yes]\"\n\n\nTo which, I type \"yes\" and hit enter. If you know what you're doing and wanna fudge with stuff, you're welcome to. Thats just beyond my abilities.\n\n\n\n\nThese instructions are liberally copied from \nwimpunk/ddclient's github page.", 
            "title": "DDClient"
        }, 
        {
            "location": "/ubuntu/ddclient/#clone-the-github-repo", 
            "text": "Note  I keep all of my cloned git repos inside of one, singular directory:  ~/git . This way, I don't have to hunt all over my system for where my repo's are and it makes it easier to keep them updated. Then, I link the library to wherever either the developer wants/requires it or where is easiest.   git clone https://github.com/wimpunk/ddclient.git ~/git/ddclient", 
            "title": "Clone the Github repo"
        }, 
        {
            "location": "/ubuntu/ddclient/#copying-files-and-creating-directories", 
            "text": "Next, its a matter of sticking the ddclient program into the right place  and creating its directories.  cd ~/git/ddclient/\nsudo cp ddclient /usr/sbin/\nsudo mkdir /etc/ddclient/\nsudo mkdir /var/cache/ddclient", 
            "title": "Copying Files and Creating Directories"
        }, 
        {
            "location": "/ubuntu/ddclient/#ddclientconf", 
            "text": "If you already have a  ddclient.conf  file made, say, using  domains.google.com 's support directions, copy that over to:  /etc/ddclient/ddclient.conf  Otherwise, copy over the repo's default  .conf  file.  sudo nano /etc/ddclient/ddclient.conf  It doesn't hurt to try to familiarize yourself with the different options. There's a TON of information, so its most likely easier to do one of the following:   Find the specific service you plan to use for your own setup  Make a new  ddclient.conf  file, rename the current one to  ddclient.conf.copy  and move from there", 
            "title": "ddclient.conf"
        }, 
        {
            "location": "/ubuntu/ddclient/#autostart", 
            "text": "Now, copy the  init.d  file over and set it up to  always  run:  sudo cp sample-etc_rc.d_init.d_ddclient.ubuntu /etc/init.d/ddclient\nsudo chmod +x /etc/init.d/ddclient\nsudo update-rc.d ddclient defaults  That sets up the auto-running and registers it as a proper service.", 
            "title": "Autostart"
        }, 
        {
            "location": "/ubuntu/ddclient/#perlcpan", 
            "text": "Make sure you have  cpan  installed, that's one of Perl's installation management systems, like  Pip  or  apt-get .  which cpan  - when you add  which  before any program's  cli  command, linux responds with where in the directory setup that program file is located. If it doesn't respond, then no program installed.  If no  cpan :  sudo apt-get install perl cpan  Next:  sudo cpan install Data::Validate::IP  Since I don't know hardly anything about Perl other than I need it, the first question that appears asks:  \"Would you like to configure as much as possible automatically? [yes]\"  To which, I type \"yes\" and hit enter. If you know what you're doing and wanna fudge with stuff, you're welcome to. Thats just beyond my abilities.   These instructions are liberally copied from  wimpunk/ddclient's github page.", 
            "title": "Perl/CPAN"
        }, 
        {
            "location": "/ubuntu/htpc-manager/", 
            "text": "Install Dependencies\n\n\n\n\nNote\n\n\nThe \n--upgrade\n part for \npip psutil\n is in case you already have \npsutil\n installed. This way, it will go ahead and run the upgrade.\n\n\n\n\nsudo apt-get install build-essential git python-imaging python-dev python-setuptools python-pip python-cherrypy vnstat -y\nsudo -H pip install --upgrade psutil\n\n\n\n\nCloning and Starting\n\n\nHellowlol's\n fork of HTPC-Manager is the one that I prefer to use.\n\n\n\n\nNote\n\n\nI keep all of my cloned git repos inside of one, singular directory: \n~/git\n. This way, I don't have to hunt all over my system for where my repo's are and it makes it easier to keep them updated. Then, I link the library to wherever either the developer wants/requires it or where is easiest.\n\n\n\n\nMake sure that the HTPC Manager files and directories are owned by your user.\n\n\ngit clone https://github.com/Hellowlol/HTPC-Manager ~/git/htpcmanager\nsudo ln -s ~/git/htpcmanager /opt/htpcmanager\nsudo chown -R $USER:$USER /opt/htpcmanager\nsudo chown -R $USER:$USER ~/git/htpcmanager\nsudo python /opt/htpcmanager/Htpc.py\n\n\n\n\n\n\nNote\n\n\nIf you see any RED TEXT CherryPy errors, those aren't death. Those are just, nicely, STANDING OUT for you to see what needs to be done.\n\n\n\n\nMake sure you hit \nCtrl-C\n to stop the program.\n\n\nAutostart init.d Copy and Edit\n\n\nYou can link over the standard \ninit.d\n file from the repo to \n/etc/init.d\n.\n\n\nsudo cp /opt/HTPCManager/initscripts/initd /etc/init.d/htpcmanager\nsudo nano /etc/init.d/htpcmanager\n\n\n\n\nChange \nAPP_PATH\n to match the path of where you stuck HTPC Manager.\n\n\n############### EDIT ME ##################\n# path to app\nAPP_PATH=/opt/HTPCManager\n\n\n\n\nThen, make the file executable and add to the \nupdate-rc.d\n autostart program.\n\n\nsudo chmod +x /etc/init.d/htpcmanager\nsudo update-rc.d htpcmanager defaults\n\n\n\n\nThen, you can run \nsudo service htpcmanager start\n, and access it  at \nhttp://127.0.0.1:8085\n\n\n\n\nDirections copied fairly liberally from \nHTPC Guides' HTPC Manager Instructions", 
            "title": "HTPC Manager"
        }, 
        {
            "location": "/ubuntu/htpc-manager/#install-dependencies", 
            "text": "Note  The  --upgrade  part for  pip psutil  is in case you already have  psutil  installed. This way, it will go ahead and run the upgrade.   sudo apt-get install build-essential git python-imaging python-dev python-setuptools python-pip python-cherrypy vnstat -y\nsudo -H pip install --upgrade psutil", 
            "title": "Install Dependencies"
        }, 
        {
            "location": "/ubuntu/htpc-manager/#cloning-and-starting", 
            "text": "Hellowlol's  fork of HTPC-Manager is the one that I prefer to use.   Note  I keep all of my cloned git repos inside of one, singular directory:  ~/git . This way, I don't have to hunt all over my system for where my repo's are and it makes it easier to keep them updated. Then, I link the library to wherever either the developer wants/requires it or where is easiest.   Make sure that the HTPC Manager files and directories are owned by your user.  git clone https://github.com/Hellowlol/HTPC-Manager ~/git/htpcmanager\nsudo ln -s ~/git/htpcmanager /opt/htpcmanager\nsudo chown -R $USER:$USER /opt/htpcmanager\nsudo chown -R $USER:$USER ~/git/htpcmanager\nsudo python /opt/htpcmanager/Htpc.py   Note  If you see any RED TEXT CherryPy errors, those aren't death. Those are just, nicely, STANDING OUT for you to see what needs to be done.   Make sure you hit  Ctrl-C  to stop the program.", 
            "title": "Cloning and Starting"
        }, 
        {
            "location": "/ubuntu/htpc-manager/#autostart-initd-copy-and-edit", 
            "text": "You can link over the standard  init.d  file from the repo to  /etc/init.d .  sudo cp /opt/HTPCManager/initscripts/initd /etc/init.d/htpcmanager\nsudo nano /etc/init.d/htpcmanager  Change  APP_PATH  to match the path of where you stuck HTPC Manager.  ############### EDIT ME ##################\n# path to app\nAPP_PATH=/opt/HTPCManager  Then, make the file executable and add to the  update-rc.d  autostart program.  sudo chmod +x /etc/init.d/htpcmanager\nsudo update-rc.d htpcmanager defaults  Then, you can run  sudo service htpcmanager start , and access it  at  http://127.0.0.1:8085   Directions copied fairly liberally from  HTPC Guides' HTPC Manager Instructions", 
            "title": "Autostart init.d Copy and Edit"
        }, 
        {
            "location": "/ubuntu/nginx-from-source/", 
            "text": "Add NGINX's ppa:repo\n\n\nsudo add-apt-repository ppa:nginx/stable\n\n\n\n\nThen, go in and remove the comment from the \ndeb-src\n line inside the \napt/sources.list.d/nginx.list\n file. The file most likely will be named something else.\n\n\nThen update:\n\n\nsudo apt-get update\n\n\n\n\nGet the Source Package of NGINX\n\n\nFirst we'll get the source package and any needed system dependencies:\n\n\n# Install package creation tools\nsudo apt-get install dpkg-dev -y\n\nsudo mkdir /opt/rebuildnginx\ncd /opt/rebuildnginx\n\n# Get Nginx  source files\nsudo apt-get source nginx\n\n# Install the build dependencies\nsudo apt-get build-dep nginx\n\n\n\n\nIf the current, main NGINX build doesn't have the specific modules that you are needing, you can add them into a specific file inside the build directory.\n\n\nThe detailed instructions for that specialized need is at \nServersForHackers.com\n.\n\n\nNext, compile and install!\n\n\ncd /opt/rebuildnginx/nginx-{release}\nsudo dpkg-buildpackage -uc -b\n\n\n\n\nThis will take around a few minutes.\n\n\nInstall NGINX\n\n\nOnce the build is complete, we'll find a bunch of \n.deb\n files added in \n/opt/rebuildnginx\n. We can use these to install NGINX.\n\n\nThe 'full' package, quite aptly, has the most pre-built modules. So, if thats what you're needing, concentrate on those files.\n\n\nNext, you'll want to check if you're on 64bit or otherwise. If you're on 64bit, most likely you wanna use \namd64\n files. Also, the \ndbg\n is specifically for debugging tools.\n\n\nDo you have the file you wanna use? Lets install it then!\n\n\nsudo dpkg --install nginx-full_{ release }+trusty0_amd64.deb\n\n\n\n\nNow, you can run \nnginx -V\n (capital V) and it'll show you the flags and modules and whatnot compiled with NGINX.\n\n\nNext, mark NGINX to be blocked from further apt-get updates.\n\n\nsudo dpkg --get-selections | grep nginx\n\n\n\n\nand for every nginx component listed run\n\n\nsudo apt-mark hold {component}\n\n\n\n\nAnd from now on, make sure to watch \nNGINX's\n web page for anymore updates, and perform the same steps again.\n\n\n\n\nThese instructions are happily borrowed from \nServersForHackers.com", 
            "title": "NGINX from Source"
        }, 
        {
            "location": "/ubuntu/nginx-from-source/#add-nginxs-pparepo", 
            "text": "sudo add-apt-repository ppa:nginx/stable  Then, go in and remove the comment from the  deb-src  line inside the  apt/sources.list.d/nginx.list  file. The file most likely will be named something else.  Then update:  sudo apt-get update", 
            "title": "Add NGINX's ppa:repo"
        }, 
        {
            "location": "/ubuntu/nginx-from-source/#get-the-source-package-of-nginx", 
            "text": "First we'll get the source package and any needed system dependencies:  # Install package creation tools\nsudo apt-get install dpkg-dev -y\n\nsudo mkdir /opt/rebuildnginx\ncd /opt/rebuildnginx\n\n# Get Nginx  source files\nsudo apt-get source nginx\n\n# Install the build dependencies\nsudo apt-get build-dep nginx  If the current, main NGINX build doesn't have the specific modules that you are needing, you can add them into a specific file inside the build directory.  The detailed instructions for that specialized need is at  ServersForHackers.com .  Next, compile and install!  cd /opt/rebuildnginx/nginx-{release}\nsudo dpkg-buildpackage -uc -b  This will take around a few minutes.", 
            "title": "Get the Source Package of NGINX"
        }, 
        {
            "location": "/ubuntu/nginx-from-source/#install-nginx", 
            "text": "Once the build is complete, we'll find a bunch of  .deb  files added in  /opt/rebuildnginx . We can use these to install NGINX.  The 'full' package, quite aptly, has the most pre-built modules. So, if thats what you're needing, concentrate on those files.  Next, you'll want to check if you're on 64bit or otherwise. If you're on 64bit, most likely you wanna use  amd64  files. Also, the  dbg  is specifically for debugging tools.  Do you have the file you wanna use? Lets install it then!  sudo dpkg --install nginx-full_{ release }+trusty0_amd64.deb  Now, you can run  nginx -V  (capital V) and it'll show you the flags and modules and whatnot compiled with NGINX.  Next, mark NGINX to be blocked from further apt-get updates.  sudo dpkg --get-selections | grep nginx  and for every nginx component listed run  sudo apt-mark hold {component}  And from now on, make sure to watch  NGINX's  web page for anymore updates, and perform the same steps again.   These instructions are happily borrowed from  ServersForHackers.com", 
            "title": "Install NGINX"
        }, 
        {
            "location": "/ubuntu/nginx-from-ubuntu-ppa/", 
            "text": "Add NGINX's PPA:Repo and Install\n\n\nFor the $nginx variable at the end of the first code line, replace it with either \nstable\n for their Stable line or \ndevelopment\n for their Mainline.\n\n\n\n\nNote\n\n\nMainline is what they consider their \"beta\" line. Stable being their, well, \"stable\" line.\n\n\n\n\nsudo add-apt-repository ppa:nginx/$nginx\nsudo apt-get update \n sudo apt-get install nginx\n\n\n\n\nI will create a NGINX configuration \"How-To\" at some point in the future.", 
            "title": "NGINX Using Ubuntu PPA"
        }, 
        {
            "location": "/ubuntu/nginx-from-ubuntu-ppa/#add-nginxs-pparepo-and-install", 
            "text": "For the $nginx variable at the end of the first code line, replace it with either  stable  for their Stable line or  development  for their Mainline.   Note  Mainline is what they consider their \"beta\" line. Stable being their, well, \"stable\" line.   sudo add-apt-repository ppa:nginx/$nginx\nsudo apt-get update   sudo apt-get install nginx  I will create a NGINX configuration \"How-To\" at some point in the future.", 
            "title": "Add NGINX's PPA:Repo and Install"
        }, 
        {
            "location": "/ubuntu/openvpn/", 
            "text": "Install the OpenVPN client:\n\n\nsudo apt-get install openvpn\n\n\n\n\nGrab the PIA OpenVPN Profile\n\n\nDownload and uncompress the PIA OpenVPN profiles:\n\n\nwget https://www.privateinternetaccess.com/openvpn/openvpn.zip\n\n\n\n\nIf \nunzip\n is not installed, go ahead:\n\n\nsudo apt-get install unzip\n\n\n\n\nThen:\n\n\nunzip openvpn.zip -d openvpn\n\n\n\n\nCopy the Files\n\n\nCopy the PIA OpenVPN certificates and profile to the OpenVPN configuration location.\n\n\n\n\nNote\n\n\nI'm using \nJapan.ovpn\n as an example location. You can/should change that to whichever location you want to use.\n\n\n\n\nsudo cp openvpn/ca.crt openvpn/crl.pem /etc/openvpn/\nsudo cp openvpn/Japan.ovpn /etc/openvpn/Japan.conf\n\n\n\n\nCreate the Login...\n\n\nCreate \n/etc/openvpn/login\n containing only your username and password, one per line, for example:\n\n\nuser12345678\nMyGreatPassword\n\n\n\n\nChange the permissions on this file so only the root user can read it:\n\n\nsudo chmod 600 /etc/openvpn/login\n\n\n\n\nAnd Edit the \n.conf\n File\n\n\nSetup OpenVPN to use your stored username and password by editing the the config file for the VPN location:\n\n\nsudo nano /etc/openvpn/Japan.conf\n\n\n\n\nChange the following lines:\n\n\n\n\n\n\n\n\nFrom This\n\n\nTo This\n\n\n\n\n\n\n\n\n\n\nca ca.crt\n\n\nca /etc/openvpn/ca.crt\n\n\n\n\n\n\nauth-user-pass\n\n\nauth-user-pass /etc/openvpn/login\n\n\n\n\n\n\ncrl-verify crl.pem\n\n\ncrl-verify /etc/openvpn/crl.pem\n\n\n\n\n\n\n\n\nTest VPN\n\n\nAt this point you should be able to test the VPN actually works:\n\n\nsudo openvpn --config /etc/openvpn/Japan.conf\n\n\n\n\nIf all is well, you'll see something like:\n\n\nsudo openvpn --config /etc/openvpn/Japan.conf\nSat Oct 24 12:10:54 2015 OpenVPN 2.3.4 arm-unknown-linux-gnueabihf [SSL (OpenSSL)] [LZO] [EPOLL] [PKCS11] [MH] [IPv6] built on Dec  5 2014\nSat Oct 24 12:10:54 2015 library versions: OpenSSL 1.0.1k 8 Jan 2015, LZO 2.08\nSat Oct 24 12:10:54 2015 UDPv4 link local: [undef]\nSat Oct 24 12:10:54 2015 UDPv4 link remote: [AF_INET]123.123.123.123:1194\nSat Oct 24 12:10:54 2015 WARNING: this configuration may cache passwords in memory -- use the auth-nocache option to prevent this\nSat Oct 24 12:10:56 2015 [Private Internet Access] Peer Connection Initiated with [AF_INET]123.123.123.123:1194\nSat Oct 24 12:10:58 2015 TUN/TAP device tun0 opened\nSat Oct 24 12:10:58 2015 do_ifconfig, tt-\nipv6=0, tt-\ndid_ifconfig_ipv6_setup=0\nSat Oct 24 12:10:58 2015 /sbin/ip link set dev tun0 up mtu 1500\nSat Oct 24 12:10:58 2015 /sbin/ip addr add dev tun0 local 10.10.10.6 peer 10.10.10.5\nSat Oct 24 12:10:59 2015 Initialization Sequence Completed\n\n\n\n\nWith the \nInitialization Sequence Completed\n being the most important.\n\n\nExit this with \nCtrl+C\n\n\nSetup OpenVPN's Autostart Configuration\n\n\nEdit the \n/etc/default/openvpn\n file\n\n\nsudo nano /etc/default/openvpn\n\n\n\n\nNext, since I use only the one \n.conf\n file,  I uncomment the \nAUTOSTART-\"all\"\n line. If you have a different setup, go through and make those changes.\n\n\nThen, to start the service:\n\n\nsudo service openvpn start\n\n\n\n\nSetup Routing and NAT\n\n\nEnable IP Forwarding:\n\n\nsudo /bin/su -c \necho -e '\\n#Enable IP Routing\\nnet.ipv4.ip_forward = 1' \n /etc/sysctl.conf\n\nsudo sysctl -p\n\n\n\n\nSetup NAT from the local LAN down the VPN tunnel:\n\n\nsudo iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE\nsudo iptables -A FORWARD -i tun0 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT\nsudo iptables -A FORWARD -i eth0 -o tun0 -j ACCEPT\n\n\n\n\nMake the NAT rules persistent across reboot:\n\n\nsudo apt-get install iptables-persistent\n\n\n\n\nThe installer will ask if you want to save current rules, select \nYes\n. This copies over the above rules to \niptables-persistent\n's files. Those are located at \n/etc/iptables\n if you ever wanna change them.\n\n\n\n\nCopied from the bottom half of \nsuperjamie's gist\n.", 
            "title": "OpenVPN"
        }, 
        {
            "location": "/ubuntu/openvpn/#install-the-openvpn-client", 
            "text": "sudo apt-get install openvpn", 
            "title": "Install the OpenVPN client:"
        }, 
        {
            "location": "/ubuntu/openvpn/#grab-the-pia-openvpn-profile", 
            "text": "Download and uncompress the PIA OpenVPN profiles:  wget https://www.privateinternetaccess.com/openvpn/openvpn.zip  If  unzip  is not installed, go ahead:  sudo apt-get install unzip  Then:  unzip openvpn.zip -d openvpn", 
            "title": "Grab the PIA OpenVPN Profile"
        }, 
        {
            "location": "/ubuntu/openvpn/#copy-the-files", 
            "text": "Copy the PIA OpenVPN certificates and profile to the OpenVPN configuration location.   Note  I'm using  Japan.ovpn  as an example location. You can/should change that to whichever location you want to use.   sudo cp openvpn/ca.crt openvpn/crl.pem /etc/openvpn/\nsudo cp openvpn/Japan.ovpn /etc/openvpn/Japan.conf", 
            "title": "Copy the Files"
        }, 
        {
            "location": "/ubuntu/openvpn/#create-the-login", 
            "text": "Create  /etc/openvpn/login  containing only your username and password, one per line, for example:  user12345678\nMyGreatPassword  Change the permissions on this file so only the root user can read it:  sudo chmod 600 /etc/openvpn/login", 
            "title": "Create the Login..."
        }, 
        {
            "location": "/ubuntu/openvpn/#and-edit-the-conf-file", 
            "text": "Setup OpenVPN to use your stored username and password by editing the the config file for the VPN location:  sudo nano /etc/openvpn/Japan.conf  Change the following lines:     From This  To This      ca ca.crt  ca /etc/openvpn/ca.crt    auth-user-pass  auth-user-pass /etc/openvpn/login    crl-verify crl.pem  crl-verify /etc/openvpn/crl.pem", 
            "title": "And Edit the .conf File"
        }, 
        {
            "location": "/ubuntu/openvpn/#test-vpn", 
            "text": "At this point you should be able to test the VPN actually works:  sudo openvpn --config /etc/openvpn/Japan.conf  If all is well, you'll see something like:  sudo openvpn --config /etc/openvpn/Japan.conf\nSat Oct 24 12:10:54 2015 OpenVPN 2.3.4 arm-unknown-linux-gnueabihf [SSL (OpenSSL)] [LZO] [EPOLL] [PKCS11] [MH] [IPv6] built on Dec  5 2014\nSat Oct 24 12:10:54 2015 library versions: OpenSSL 1.0.1k 8 Jan 2015, LZO 2.08\nSat Oct 24 12:10:54 2015 UDPv4 link local: [undef]\nSat Oct 24 12:10:54 2015 UDPv4 link remote: [AF_INET]123.123.123.123:1194\nSat Oct 24 12:10:54 2015 WARNING: this configuration may cache passwords in memory -- use the auth-nocache option to prevent this\nSat Oct 24 12:10:56 2015 [Private Internet Access] Peer Connection Initiated with [AF_INET]123.123.123.123:1194\nSat Oct 24 12:10:58 2015 TUN/TAP device tun0 opened\nSat Oct 24 12:10:58 2015 do_ifconfig, tt- ipv6=0, tt- did_ifconfig_ipv6_setup=0\nSat Oct 24 12:10:58 2015 /sbin/ip link set dev tun0 up mtu 1500\nSat Oct 24 12:10:58 2015 /sbin/ip addr add dev tun0 local 10.10.10.6 peer 10.10.10.5\nSat Oct 24 12:10:59 2015 Initialization Sequence Completed  With the  Initialization Sequence Completed  being the most important.  Exit this with  Ctrl+C", 
            "title": "Test VPN"
        }, 
        {
            "location": "/ubuntu/openvpn/#setup-openvpns-autostart-configuration", 
            "text": "Edit the  /etc/default/openvpn  file  sudo nano /etc/default/openvpn  Next, since I use only the one  .conf  file,  I uncomment the  AUTOSTART-\"all\"  line. If you have a different setup, go through and make those changes.  Then, to start the service:  sudo service openvpn start", 
            "title": "Setup OpenVPN's Autostart Configuration"
        }, 
        {
            "location": "/ubuntu/openvpn/#setup-routing-and-nat", 
            "text": "Enable IP Forwarding:  sudo /bin/su -c  echo -e '\\n#Enable IP Routing\\nnet.ipv4.ip_forward = 1'   /etc/sysctl.conf \nsudo sysctl -p  Setup NAT from the local LAN down the VPN tunnel:  sudo iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE\nsudo iptables -A FORWARD -i tun0 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT\nsudo iptables -A FORWARD -i eth0 -o tun0 -j ACCEPT  Make the NAT rules persistent across reboot:  sudo apt-get install iptables-persistent  The installer will ask if you want to save current rules, select  Yes . This copies over the above rules to  iptables-persistent 's files. Those are located at  /etc/iptables  if you ever wanna change them.   Copied from the bottom half of  superjamie's gist .", 
            "title": "Setup Routing and NAT"
        }, 
        {
            "location": "/ubuntu/plexpy/", 
            "text": "PlexPy Instructions\n\n\nAs always, I keep my git repo's inside of one single, easily found directory, \n~/git\n. Thus:\n\n\ngit clone https://github.com/drzoidberg33/plexpy.git ~/git/plexpy\n\n\nThen:\n\n\nsudo touch /etc/default/plexpy\n\n\nThat will make sure to stop any possible errors or warnings. It also is where you need to make any changes, in case you don't use the default settings that are in the various init scripts. You can see the options inside of \n~/git/plexpy/init-scripts/init.ubuntu\n if you're using ubuntu.\n\n\nNext, I use the plexpy user.\n\n\nsudo adduser --system --no-create-home plexpy\nsudo chown -R plexpy:nogroup ~/git/plexpy\nsudo ln -s ~/git/plexpy /opt/plexpy\nsudo chmod +x ~/git/plexpy/init-scripts/init.ubuntu\nsudo ln -s ~/git/plexpy/init-scripts/init.ubuntu /etc/init.d/plexpy\nsudo update-rc.d plexpy defaults\nsudo service plexpy start", 
            "title": "PlexPy"
        }, 
        {
            "location": "/ubuntu/plexpy/#plexpy-instructions", 
            "text": "As always, I keep my git repo's inside of one single, easily found directory,  ~/git . Thus:  git clone https://github.com/drzoidberg33/plexpy.git ~/git/plexpy  Then:  sudo touch /etc/default/plexpy  That will make sure to stop any possible errors or warnings. It also is where you need to make any changes, in case you don't use the default settings that are in the various init scripts. You can see the options inside of  ~/git/plexpy/init-scripts/init.ubuntu  if you're using ubuntu.  Next, I use the plexpy user.  sudo adduser --system --no-create-home plexpy\nsudo chown -R plexpy:nogroup ~/git/plexpy\nsudo ln -s ~/git/plexpy /opt/plexpy\nsudo chmod +x ~/git/plexpy/init-scripts/init.ubuntu\nsudo ln -s ~/git/plexpy/init-scripts/init.ubuntu /etc/init.d/plexpy\nsudo update-rc.d plexpy defaults\nsudo service plexpy start", 
            "title": "PlexPy Instructions"
        }, 
        {
            "location": "/ubuntu/sonarr/", 
            "text": "Sonarr Installation\n\n\nMake sure apt-transport-https is installed:\n\n\nsudo apt-get install apt-transport-https\n\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys FDA5DFFC\necho \ndeb https://apt.sonarr.tv/ master main\n | sudo tee -a /etc/apt/sources.list.d/sonarr.list\n\nsudo apt-get update \n sudo apt-get install nzbdrone -y\n\n\n\n\nRemove the custom NzbDrone list to avoid future dependency issues.\n\n\nsudo rm /etc/apt/sources.list.d/sonarr.list\n\n\nPerform the initial build and make sure it doesn't error:\n\n\nsudo mono /opt/NzbDrone/NzbDrone.exe\n\n\nNext, make the autostart file...\n\n\nsudo nano /etc/init.d/nzbdrone\n\n\n\n\n#! /bin/sh\n### BEGIN INIT INFO\n# Provides: NzbDrone\n# Required-Start: $local_fs $network $remote_fs\n# Required-Stop: $local_fs $network $remote_fs\n# Should-Start: $NetworkManager\n# Should-Stop: $NetworkManager\n# Default-Start: 2 3 4 5\n# Default-Stop: 0 1 6\n# Short-Description: starts instance of NzbDrone\n# Description: starts instance of NzbDrone using start-stop-daemon\n### END INIT INFO\n\n############### EDIT ME ##################\n# path to app\nAPP_PATH=/opt/NzbDrone\n\n# user\nRUN_AS=\nYour UserName\n\n\n# path to mono bin\nDAEMON=$(which mono)\n\n# Path to store PID file\nPID_FILE=/var/run/nzbdrone/nzbdrone.pid\nPID_PATH=$(dirname $PID_FILE)\n\n# script name\nNAME=nzbdrone\n\n# app name\nDESC=NzbDrone\n\n# startup args\nEXENAME=\nNzbDrone.exe\n\nDAEMON_OPTS=\n \n$EXENAME\n\n############### END EDIT ME ##################\n\nNZBDRONE_PID=`ps auxf | grep NzbDrone.exe | grep -v grep | awk '{print $2}'`\n\ntest -x $DAEMON || exit 0\n\nset -e\n\n#Look for PID and create if doesn't exist\nif [ ! -d $PID_PATH ]; then\n    mkdir -p $PID_PATH\n    chown $RUN_AS $PID_PATH\nfi\n\nif [ ! -d $DATA_DIR ]; then\n    mkdir -p $DATA_DIR\n    chown $RUN_AS $DATA_DIR\nfi\n\nif [ -e $PID_FILE ]; then\n    PID=`cat $PID_FILE`\n    if ! kill -0 $PID \n /dev/null 2\n1; then\n        echo \nRemoving stale $PID_FILE\n\n        rm $PID_FILE\n    fi\nfi\n\necho $NZBDRONE_PID \n $PID_FILE\n\ncase \n$1\n in\n    start)\n    if [ -z \n${NZBDRONE_PID}\n ]; then\n        echo \nStarting $DESC\n\n        rm -rf $PID_PATH || return 1\n        install -d --mode=0755 -o $RUN_AS $PID_PATH || return 1\n        start-stop-daemon -d $APP_PATH -c $RUN_AS --start --background --pidfile    $PID_FILE --exec $DAEMON -- $DAEMON_OPTS\n    else\n        echo \nNzbDrone already running.\n\n    fi\n    ;;\n    stop)\n        echo \nStopping $DESC\n\n        echo $NZBDRONE_PID \n $PID_FILE\n        start-stop-daemon --stop --pidfile $PID_FILE --retry 15\n    ;;\n    restart|force-reload)\n        echo \nRestarting $DESC\n\n        start-stop-daemon --stop --pidfile $PID_FILE --retry 15\n        start-stop-daemon -d $APP_PATH -c $RUN_AS --start --background --pidfile $PID_FILE --exec $DAEMON -- $DAEMON_OPTS\n    ;;\n    status)\n        # Use LSB function library if it exists\n        if [ -f /lib/lsb/init-functions ]; then\n            . /lib/lsb/init-functions\n            if [ -e $PID_FILE ]; then\n                status_of_proc -p $PID_FILE \n$DAEMON\n \n$NAME\n \n exit 0 || exit $?\n            else\n                log_daemon_msg \n$NAME is not running\n\n                exit 3\n            fi\n        else\n            # Use basic functions\n            if [ -e $PID_FILE ]; then\n                PID=`cat $PID_FILE`\n                if kill -0 $PID \n /dev/null 2\n1; then\n                    echo \n * $NAME is running\n\n                    exit 0\n                fi\n            else\n                echo \n * $NAME is not running\n\n                exit 3\n            fi\n        fi\n    ;;\n    *)\n        N=/etc/init.d/$NAME\n        echo \nUsage: $N {start|stop|restart|force-reload|status}\n \n2\n        exit 1\n        ;;\n    esac\n\nexit 0\n\n\n\n\nThen, make executable and add to autostart.\n\n\nsudo chmod +x /etc/init.d/nzbdrone\nsudo update-rc.d nzbdrone defaults\n\n\n\n\nAccess at http://localhost:8989\n\n\nDirections copied from \nHTPC-Guides.com", 
            "title": "Sonarr"
        }, 
        {
            "location": "/ubuntu/sonarr/#sonarr-installation", 
            "text": "Make sure apt-transport-https is installed:  sudo apt-get install apt-transport-https\n\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys FDA5DFFC\necho  deb https://apt.sonarr.tv/ master main  | sudo tee -a /etc/apt/sources.list.d/sonarr.list\n\nsudo apt-get update   sudo apt-get install nzbdrone -y  Remove the custom NzbDrone list to avoid future dependency issues.  sudo rm /etc/apt/sources.list.d/sonarr.list  Perform the initial build and make sure it doesn't error:  sudo mono /opt/NzbDrone/NzbDrone.exe  Next, make the autostart file...  sudo nano /etc/init.d/nzbdrone  #! /bin/sh\n### BEGIN INIT INFO\n# Provides: NzbDrone\n# Required-Start: $local_fs $network $remote_fs\n# Required-Stop: $local_fs $network $remote_fs\n# Should-Start: $NetworkManager\n# Should-Stop: $NetworkManager\n# Default-Start: 2 3 4 5\n# Default-Stop: 0 1 6\n# Short-Description: starts instance of NzbDrone\n# Description: starts instance of NzbDrone using start-stop-daemon\n### END INIT INFO\n\n############### EDIT ME ##################\n# path to app\nAPP_PATH=/opt/NzbDrone\n\n# user\nRUN_AS= Your UserName \n\n# path to mono bin\nDAEMON=$(which mono)\n\n# Path to store PID file\nPID_FILE=/var/run/nzbdrone/nzbdrone.pid\nPID_PATH=$(dirname $PID_FILE)\n\n# script name\nNAME=nzbdrone\n\n# app name\nDESC=NzbDrone\n\n# startup args\nEXENAME= NzbDrone.exe \nDAEMON_OPTS=   $EXENAME\n\n############### END EDIT ME ##################\n\nNZBDRONE_PID=`ps auxf | grep NzbDrone.exe | grep -v grep | awk '{print $2}'`\n\ntest -x $DAEMON || exit 0\n\nset -e\n\n#Look for PID and create if doesn't exist\nif [ ! -d $PID_PATH ]; then\n    mkdir -p $PID_PATH\n    chown $RUN_AS $PID_PATH\nfi\n\nif [ ! -d $DATA_DIR ]; then\n    mkdir -p $DATA_DIR\n    chown $RUN_AS $DATA_DIR\nfi\n\nif [ -e $PID_FILE ]; then\n    PID=`cat $PID_FILE`\n    if ! kill -0 $PID   /dev/null 2 1; then\n        echo  Removing stale $PID_FILE \n        rm $PID_FILE\n    fi\nfi\n\necho $NZBDRONE_PID   $PID_FILE\n\ncase  $1  in\n    start)\n    if [ -z  ${NZBDRONE_PID}  ]; then\n        echo  Starting $DESC \n        rm -rf $PID_PATH || return 1\n        install -d --mode=0755 -o $RUN_AS $PID_PATH || return 1\n        start-stop-daemon -d $APP_PATH -c $RUN_AS --start --background --pidfile    $PID_FILE --exec $DAEMON -- $DAEMON_OPTS\n    else\n        echo  NzbDrone already running. \n    fi\n    ;;\n    stop)\n        echo  Stopping $DESC \n        echo $NZBDRONE_PID   $PID_FILE\n        start-stop-daemon --stop --pidfile $PID_FILE --retry 15\n    ;;\n    restart|force-reload)\n        echo  Restarting $DESC \n        start-stop-daemon --stop --pidfile $PID_FILE --retry 15\n        start-stop-daemon -d $APP_PATH -c $RUN_AS --start --background --pidfile $PID_FILE --exec $DAEMON -- $DAEMON_OPTS\n    ;;\n    status)\n        # Use LSB function library if it exists\n        if [ -f /lib/lsb/init-functions ]; then\n            . /lib/lsb/init-functions\n            if [ -e $PID_FILE ]; then\n                status_of_proc -p $PID_FILE  $DAEMON   $NAME    exit 0 || exit $?\n            else\n                log_daemon_msg  $NAME is not running \n                exit 3\n            fi\n        else\n            # Use basic functions\n            if [ -e $PID_FILE ]; then\n                PID=`cat $PID_FILE`\n                if kill -0 $PID   /dev/null 2 1; then\n                    echo   * $NAME is running \n                    exit 0\n                fi\n            else\n                echo   * $NAME is not running \n                exit 3\n            fi\n        fi\n    ;;\n    *)\n        N=/etc/init.d/$NAME\n        echo  Usage: $N {start|stop|restart|force-reload|status}   2\n        exit 1\n        ;;\n    esac\n\nexit 0  Then, make executable and add to autostart.  sudo chmod +x /etc/init.d/nzbdrone\nsudo update-rc.d nzbdrone defaults  Access at http://localhost:8989  Directions copied from  HTPC-Guides.com", 
            "title": "Sonarr Installation"
        }, 
        {
            "location": "/ubuntu/telegram-for-sonarr/", 
            "text": "Sonarr-Telegram Installation\n\n\nMake sure Node.js is installed:\n\n\nsudo apt-get install node.js\n\n\nClone the repo:\n\n\ngit clone https://github.com/onedr0p/telegram-sonarr-bot ~/git/\nsudo ln -s ~/git/telegram-sonarr-bot /opt/telegram-sonarr-bot\ncd /opt/telegram-sonarr-bot\nsudo npm install\n\n\n\n\nNext, copy the acl.json.template to acl.json\n\ncp acl.json.template acl.json\n\n\nThen, copy config.json.template to config.json\n\ncp config.json.template config.json\n\n\nIn \nconfig.json\n fill in the various values:\n\n\n\n\nTelegram: botToken: Your Telegram Bot Token from 'BotFather's' \n/token\n\n\nBot:\n\n\nPassword: Your, manually entered password that is independent of any other telegram option, and only for this bot.\n\n\nOwner: Your telegram user ID that you receive from 'IDBot's'  \n/getid\n\n\nnotifyID: Same as the Owner option above\n\n\n\n\n\n\nSonarr:\n\n\nhostname: the IP address or FQDN of where Sonarr is running. EX: 192.168.1.20\n\n\napiKey: The API Key from Sonarr's settings page\n\n\nport: the port number\n\n\nurlBase: if you are reverse-proxying, you can enter the info here. AKA /sonarr\n\n\nssl: Set to true if SSL is turned on in Sonarr's settings\n\n\nusername: Sonarr's Username, if set\n\n\npassword: Sonarr's Password, if set\n\n\n\n\n\n\n\n\nNext, start the bot.\n\nnode sonarr.js\n and run through the normal stuff to make sure it works.\n\n\nNext, create the Upstart script:\n\n\ngit clone https://github.com/chovy/node-startup.git ~/git/node-startup\nsudo cp ~/git/node-startup/init.d/node-app /etc/init.d/telegram-sonarr\nsudo nano /etc/init.d/telegram-sonarr\n\n\n\n\nMake sure to edit the top of the file thusly:\n\n\nUSER=\nroot\n\nNODE_ENV=\nproduction\n\nPORT=\n3000\n\nAPP_DIR=\n/opt/telegram-sonarr-bot\n\nNODE_APP=\nsonarr.js\n\nCONFIG_DIR=\n$APP_DIR\n\nPID_DIR=\n/var/run\n\nPID_FILE=\n$PID_DIR/telegram-sonarr.pid\n\nLOG_DIR=\n/var/log\n\nLOG_FILE=\n$LOG_DIR/telegram-sonarr.log\n\nNODE_EXEC=$(which node)\nAPP_NAME=\nTelegram-Sonarr-Bot\n\n\n\n\n\nThen,\n\n\nsudo chmod +x /etc/init.d/telegram-sonarr\nsudo update-rc.d telegram-sonarr defaults\n\n\n\n\nThen, test it out:\n\n\nsudo service telegram-sonarr start\n\n\nIn Telegram, in your bot's chat window, type \n/start\n. It will then state that you are not authorized.\n\n\n/auth [password]\n where [password] is the password you put into the configuration file.\n\n\nThen, again, type \n/start\n.", 
            "title": "Telegram for Sonarr"
        }, 
        {
            "location": "/ubuntu/telegram-for-sonarr/#sonarr-telegram-installation", 
            "text": "Make sure Node.js is installed:  sudo apt-get install node.js  Clone the repo:  git clone https://github.com/onedr0p/telegram-sonarr-bot ~/git/\nsudo ln -s ~/git/telegram-sonarr-bot /opt/telegram-sonarr-bot\ncd /opt/telegram-sonarr-bot\nsudo npm install  Next, copy the acl.json.template to acl.json cp acl.json.template acl.json  Then, copy config.json.template to config.json cp config.json.template config.json  In  config.json  fill in the various values:   Telegram: botToken: Your Telegram Bot Token from 'BotFather's'  /token  Bot:  Password: Your, manually entered password that is independent of any other telegram option, and only for this bot.  Owner: Your telegram user ID that you receive from 'IDBot's'   /getid  notifyID: Same as the Owner option above    Sonarr:  hostname: the IP address or FQDN of where Sonarr is running. EX: 192.168.1.20  apiKey: The API Key from Sonarr's settings page  port: the port number  urlBase: if you are reverse-proxying, you can enter the info here. AKA /sonarr  ssl: Set to true if SSL is turned on in Sonarr's settings  username: Sonarr's Username, if set  password: Sonarr's Password, if set     Next, start the bot. node sonarr.js  and run through the normal stuff to make sure it works.  Next, create the Upstart script:  git clone https://github.com/chovy/node-startup.git ~/git/node-startup\nsudo cp ~/git/node-startup/init.d/node-app /etc/init.d/telegram-sonarr\nsudo nano /etc/init.d/telegram-sonarr  Make sure to edit the top of the file thusly:  USER= root \nNODE_ENV= production \nPORT= 3000 \nAPP_DIR= /opt/telegram-sonarr-bot \nNODE_APP= sonarr.js \nCONFIG_DIR= $APP_DIR \nPID_DIR= /var/run \nPID_FILE= $PID_DIR/telegram-sonarr.pid \nLOG_DIR= /var/log \nLOG_FILE= $LOG_DIR/telegram-sonarr.log \nNODE_EXEC=$(which node)\nAPP_NAME= Telegram-Sonarr-Bot   Then,  sudo chmod +x /etc/init.d/telegram-sonarr\nsudo update-rc.d telegram-sonarr defaults  Then, test it out:  sudo service telegram-sonarr start  In Telegram, in your bot's chat window, type  /start . It will then state that you are not authorized.  /auth [password]  where [password] is the password you put into the configuration file.  Then, again, type  /start .", 
            "title": "Sonarr-Telegram Installation"
        }, 
        {
            "location": "/ubuntu/transmission-daemon/", 
            "text": "Install Transmission on Ubuntu\n\n\nAdd the most up-to-date repo for transmission:\n\n\necho \ndeb http://ppa.launchpad.net/transmissionbt/ppa/ubuntu trusty main\n | sudo tee -a /etc/apt/sources.list.d/transmission-bt.list\necho \ndeb-src http://ppa.launchpad.net/transmissionbt/ppa/ubuntu trusty main\n | sudo tee -a /etc/apt/sources.list.d/transmission-bt.list\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 365C5CA1\n\n\n\n\nThen, install.\n\n\nYou also need to stop the transmission service after its finished installing, in order to properly edit the config file.\n\n\nsudo apt-get install transmission-daemon transmission-cli -y\nsudo service transmission-daemon stop\n\n\n\n\nAdd the Transmission group to your regular user which will prevent permission issues.\n\n\nsudo usermod -aG debian-transmission $USER\n\n\nNext, change the default daemon-user that runs transmission.\n\n\nsudo nano /etc/init.d/transmission-daemon\n\n\nand change the \nUSER\n from \ndebian-transmission\n to your user.\n\n\nThen, change the permissions of various directories and files:\n\n\nsudo chown -R $USER /var/lib/transmission-daemon/info/\nsudo chmod 775 /var/lib/transmission-daemon/info/settings.json\n\n\n\n\nNow, onto editing the bit \nsettings.json\n file.\n\n\nsudo nano /etc/transmission-daemon/settings.json\n\n\nThe settings file is quite long with lots of options. The Most Important parts are:\n\n\n`\"rpc-whitelist\": \"0.0.0.0\",\n This blocks off all but only the IP listed from accessing....\n\n\"rpc-whitelist-enabled\": true,\n This is the boolean to turn whitelisting on/off. Doesn't always take for some reason.....\n\n\nrpc-whitelist\n: \n*.*.*.*\n,\n\nrpc-whitelist-enabled\n: false,\n\n\n\n\nYou can also change the IP address to \"192.168.\n.\n\" or whatever your home IP address ranges are, depending on what your personal security wants are.\n\n\nrpc-password\n: \npassword\n,\n\nrpc-username\n: \nusername\n,\n\n\n\n\nChange the download-dir to where ever you want it....\n\n\n\"download-dir\": \"/var/lib/transmission-daemon/downloads\",\n\n\nThis is the amount of items being downloaded at once. I usually stay at 5 max, no matter what machine I'm using.\n\n\n\"download-queue-size\": 5,\n\n\nFor the seeding queue, I honestly lower it down to 5 as well, since I like to double the upload amount.\n\n\n\"seed-queue-size\": 5,\n\n\nSet umask to 002 to avoid permission issues...\n\n\n\"umask\": 002,\n\n\nI set the blocklist up as well.\n\n\nblocklist-enabled\n: true,\n\nblocklist-url\n: \nhttp://john.bitsurge.net/public/biglist.p2p.gz\n,\n\n\n\n\nTaken from \nGiulioMac's Personal Blog\n\n\nSave the file and restart the service.\n\n\nsudo service transmission-daemon restart\n\n\nAccess at http://localhost:9091 unless you changed that as well.\n\n\nCopied from \nHTPC-Guides\n and \nStackExchange's Raspberry Pi Forum on Transmission Permissions", 
            "title": "Transmission-Daemon"
        }, 
        {
            "location": "/ubuntu/transmission-daemon/#install-transmission-on-ubuntu", 
            "text": "Add the most up-to-date repo for transmission:  echo  deb http://ppa.launchpad.net/transmissionbt/ppa/ubuntu trusty main  | sudo tee -a /etc/apt/sources.list.d/transmission-bt.list\necho  deb-src http://ppa.launchpad.net/transmissionbt/ppa/ubuntu trusty main  | sudo tee -a /etc/apt/sources.list.d/transmission-bt.list\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 365C5CA1  Then, install.  You also need to stop the transmission service after its finished installing, in order to properly edit the config file.  sudo apt-get install transmission-daemon transmission-cli -y\nsudo service transmission-daemon stop  Add the Transmission group to your regular user which will prevent permission issues.  sudo usermod -aG debian-transmission $USER  Next, change the default daemon-user that runs transmission.  sudo nano /etc/init.d/transmission-daemon  and change the  USER  from  debian-transmission  to your user.  Then, change the permissions of various directories and files:  sudo chown -R $USER /var/lib/transmission-daemon/info/\nsudo chmod 775 /var/lib/transmission-daemon/info/settings.json  Now, onto editing the bit  settings.json  file.  sudo nano /etc/transmission-daemon/settings.json  The settings file is quite long with lots of options. The Most Important parts are:  `\"rpc-whitelist\": \"0.0.0.0\",  This blocks off all but only the IP listed from accessing.... \"rpc-whitelist-enabled\": true,  This is the boolean to turn whitelisting on/off. Doesn't always take for some reason.....  rpc-whitelist :  *.*.*.* , rpc-whitelist-enabled : false,  You can also change the IP address to \"192.168. . \" or whatever your home IP address ranges are, depending on what your personal security wants are.  rpc-password :  password , rpc-username :  username ,  Change the download-dir to where ever you want it....  \"download-dir\": \"/var/lib/transmission-daemon/downloads\",  This is the amount of items being downloaded at once. I usually stay at 5 max, no matter what machine I'm using.  \"download-queue-size\": 5,  For the seeding queue, I honestly lower it down to 5 as well, since I like to double the upload amount.  \"seed-queue-size\": 5,  Set umask to 002 to avoid permission issues...  \"umask\": 002,  I set the blocklist up as well.  blocklist-enabled : true, blocklist-url :  http://john.bitsurge.net/public/biglist.p2p.gz ,  Taken from  GiulioMac's Personal Blog  Save the file and restart the service.  sudo service transmission-daemon restart  Access at http://localhost:9091 unless you changed that as well.  Copied from  HTPC-Guides  and  StackExchange's Raspberry Pi Forum on Transmission Permissions", 
            "title": "Install Transmission on Ubuntu"
        }, 
        {
            "location": "/rpi/boot-from-usb/", 
            "text": "Use External USB Stick for Raspberry Pi OS\n\n\nFind the USB Drive\n\n\nIf you're using a simple low-powered thumb drive, simply plug it into the Raspberry Pi. If you're planning on using a larger, HDD-like drive, I would suggest you use an externally powered USB hub device. To help power the external drive and not draw too much from the Raspberry Pi.\n\n\nNext, type \nlsusb\n to see a basic break down of what your RPI can see. It doesn't exactly get you a lot of info, but it doesn't hurt to start here.\n\n\nUsually, I see:\n\n\nBus 001 Device 004: ID 0930:6545 Toshiba Corp. Kingston DataTraveler 102 Flash Drive / HEMA Flash Drive 2 GB / PNY Attache 4GB Stick\nBus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter\nBus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n\n\n\n\nThe top line being the flash drive that I have plugged in. But, you'll notice, it doesn't give you the nice pretty \n/dev/sd[x]\n that we're needing here.\n\n\nNow, the website I'm using as a guide for this instructional -  \nAdafruit.com\n - suggests using \ndmesg\n as a way to find your device. Though this can be messy because \ndmesg\n is basically your systems \"this is what I'm doing and seeing all the time\" kind of messaging service. Anytime a USB device is plugged or unplugged, anytime you start, stop or restart your machine, or any number of events occurring, it adds itself to \ndmesg\n. So, don't get flustered if you can't find your USB device.\n\n\nIf the last thing you did was insert your USB, it should be the last item appearing on \ndmesg\n\n\nsudo dmesg\n should show:\n\n\n[  459.896922] usb 1-1.2: new high-speed USB device number 4 using dwc_otg\n[  460.018734] usb 1-1.2: New USB device found, idVendor=0930, idProduct=6545\n[  460.026951] usb 1-1.2: New USB device strings: Mfr=1, Product=2, SerialNumber=3\n[  460.035530] usb 1-1.2: Product: TransMemory-Mx\n[  460.041271] usb 1-1.2: Manufacturer: TOSHIBA\n[  460.046801] usb 1-1.2: SerialNumber: 60A44C429E6BED81F000ED00\n[  460.055140] usb-storage 1-1.2:1.0: USB Mass Storage device detected\n[  460.064034] scsi host0: usb-storage 1-1.2:1.0\n[  461.068295] scsi 0:0:0:0: Direct-Access     TOSHIBA  TransMemory-Mx   PMAP PQ: 0 ANSI: 6\n[  461.081327] sd 0:0:0:0: [sda] 60929280 512-byte logical blocks: (31.2 GB/29.1 GiB)\n[  461.093654] sd 0:0:0:0: [sda] Write Protect is off\n[  461.100343] sd 0:0:0:0: [sda] Mode Sense: 45 00 00 00\n[  461.101667] sd 0:0:0:0: [sda] Write cache: disabled, read cache: enabled, doesnt support DPO or FUA\n[  461.114459] sd 0:0:0:0: Attached scsi generic sg0 type 0\n[  463.171778]  sda: sda1\n[  463.182905] sd 0:0:0:0: [sda] Attached SCSI removable disk\n\n\n\n\nYou'll notice the \nsda\n monikers there. That would be the \n/dev/sda\n that we're looking for. So, the newest USB device has been assigned \n/dev/sda\n on my machine. Now, of course, yours might be different. You never know.\n\n\nOr, if you're \ndmesg\n is stupidly long and you can't find it quickly, you can always \nsudo dmesg | grep sd[a-z]\n. \ngrep\n being a searching program and the \nsd[a-z]\n being whats called a \"regex\" search. Basically, grep takes \nsd\n then adds each letter from a-z to the end and searches for those terms. It then will present you with the information, making it easier for you to find things. The same thing works with \n[0-9]\n as well. I like to use it to delete a large amount of log files that tend to build up inside of \n/var/log\n. \nsudo rm ./*.[0-9].*\n or what have you.\n\n\nInstall Adafruit's USB Program\n\n\nNext, to continue the USB bootable instructional.... You want to add Adafruit's Linux Repo to your apt-get stuffs. You can either:\n\n\ncurl -sLS https://apt.adafruit.com/add | sudo bash\n\n\nwhich will automatically add their repo and do a \nsudo apt-get update\n for you. Or, you can go the long way round:\n\n\nFirst, adding the repo to your \nsources.list\n\n\necho \"deb http://apt.adafruit.com/raspbian/ wheezy main\" | sudo tee --append /etc/apt/sources.list\n\n\nThen, grabbing their gpg key:\n\n\nwget -O - -q https://apt.adafruit.com/apt.adafruit.com.gpg.key | sudo apt-key add -\n\n\nAnd then run \nsudo apt-get update\n.\n\n\nNext, you'll want to install:\n\n\nsudo apt-get install adafruit-pi-externalroot-helper\n\n\nThats their program for having your RPI run off of an external USB.\n\n\nThen, to run the program:\n\n\nsudo adafruit-pi-externalroot-helper -d /dev/sda\n\n\nreplacing the \n/dev/sda\n with whatever your USB drive is sitting at. Make SURE you get this right, as you don't want to really wipe your SD card. Though I'm fairly certain not only would that not work, it luckily is an easy fix to get your RPI software back on it again.... Unless you've been using it a while.\n\n\nThis program does take at least a few minutes to run through. You'll need to restart your RPI as well once its finished.\n\n\nIt will give you a series of messages once its done. Make sure to read through them, in case there are any errors. It also tells you how to make sure it worked:\n\n\n[boot config] Ok, your system should be ready. You may wish to check:\n[boot config]   /mnt/etc/fstab\n[boot config]   /boot/cmdline.txt\n[boot config] Your new root drive is currently accessible under /mnt.\n[boot config] In order to restart with this drive at /, please type:\n[boot config] sudo reboot\n\n\n\n\nThe key lines are:\n\n\nOk, your system should be ready. You may wish to check:\n    /mnt/etc/fstab\n    /boot/cmdline.txt\n\n\n\n\nIt really means you need to check \n/etc/fstab\n. Not sure why they included the extra \n/mnt\n in there.\n\n\nMy \n/etc/fstab\n now shows:\n\n\n/dev/mmcblk0p1 /boot vfat defaults 0 2\n#/dev/mmcblk0p2 / ext4 errors=remount-ro,noatime,nodiratime,commit=120 0 1\ntmpfs /tmp tmpfs defaults,nodev,nosuid 0 0\n/dev/disk/by-uuid/94551cfd-d0fc-42df-b742-b7a6434c0d8a    /   ext4    defaults,noatime  0       1\n\n\n\n\nNotice the commented out line \n#/dev/mmcblk0p2\n\n\nThat was the original line for the sd card. The line prior was also there before, as the SD card was both the boot media and the OS media. But, now the SD is ONLY the boot, and the external USB is the OS media.\n\n\nYou can also \ndf -h\n. This shows your filesystem stuffs. The \n-h\n being human readable format on the sizes.\n\n\nFilesystem      Size  Used Avail Use% Mounted on\n/dev/root        29G  1.2G   26G   5% /\ndevtmpfs        483M  4.0K  483M   1% /dev\nnone            4.0K     0  4.0K   0% /sys/fs/cgroup\ntmpfs           487M     0  487M   0% /tmp\nnone             98M  232K   98M   1% /run\nnone            5.0M     0  5.0M   0% /run/lock\nnone            487M     0  487M   0% /run/shm\ncgmfs           100K     0  100K   0% /run/cgmanager/fs\nnone            100M     0  100M   0% /run/user\n/dev/mmcblk0p1   61M   36M   26M  58% /boot\ntmpfs            98M     0   98M   0% /run/user/1000\n\n\n\n\n/dev/root\n being the USB drive now. And, it shows the large size of the USB drive as well.\n\n\nRecovering from a failed boot\n\n\nIf the RPI should ever not wanna work correctly with the USB drive this way, you can always take the SD card out of your RPI, plug it into your regular machine that you used to install the OS.\n\n\nThen, open the first partition and find the file \ncmdline.txt\n. Replace the text \nroot=PARTUUID=....rootdelay=5\n with \nroot=/dev/mmcblk0p2\n, which will point the root partition back to the 2nd partition of your SD card. It should roughly look like this:\n\n\ndwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait fbcon=map:10 fbcon=font:VGA8x8\n\n\nPlace the SD card back into the RPI, and it should boot normally.", 
            "title": "Run OS from USB"
        }, 
        {
            "location": "/rpi/boot-from-usb/#use-external-usb-stick-for-raspberry-pi-os", 
            "text": "", 
            "title": "Use External USB Stick for Raspberry Pi OS"
        }, 
        {
            "location": "/rpi/boot-from-usb/#find-the-usb-drive", 
            "text": "If you're using a simple low-powered thumb drive, simply plug it into the Raspberry Pi. If you're planning on using a larger, HDD-like drive, I would suggest you use an externally powered USB hub device. To help power the external drive and not draw too much from the Raspberry Pi.  Next, type  lsusb  to see a basic break down of what your RPI can see. It doesn't exactly get you a lot of info, but it doesn't hurt to start here.  Usually, I see:  Bus 001 Device 004: ID 0930:6545 Toshiba Corp. Kingston DataTraveler 102 Flash Drive / HEMA Flash Drive 2 GB / PNY Attache 4GB Stick\nBus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter\nBus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub  The top line being the flash drive that I have plugged in. But, you'll notice, it doesn't give you the nice pretty  /dev/sd[x]  that we're needing here.  Now, the website I'm using as a guide for this instructional -   Adafruit.com  - suggests using  dmesg  as a way to find your device. Though this can be messy because  dmesg  is basically your systems \"this is what I'm doing and seeing all the time\" kind of messaging service. Anytime a USB device is plugged or unplugged, anytime you start, stop or restart your machine, or any number of events occurring, it adds itself to  dmesg . So, don't get flustered if you can't find your USB device.  If the last thing you did was insert your USB, it should be the last item appearing on  dmesg  sudo dmesg  should show:  [  459.896922] usb 1-1.2: new high-speed USB device number 4 using dwc_otg\n[  460.018734] usb 1-1.2: New USB device found, idVendor=0930, idProduct=6545\n[  460.026951] usb 1-1.2: New USB device strings: Mfr=1, Product=2, SerialNumber=3\n[  460.035530] usb 1-1.2: Product: TransMemory-Mx\n[  460.041271] usb 1-1.2: Manufacturer: TOSHIBA\n[  460.046801] usb 1-1.2: SerialNumber: 60A44C429E6BED81F000ED00\n[  460.055140] usb-storage 1-1.2:1.0: USB Mass Storage device detected\n[  460.064034] scsi host0: usb-storage 1-1.2:1.0\n[  461.068295] scsi 0:0:0:0: Direct-Access     TOSHIBA  TransMemory-Mx   PMAP PQ: 0 ANSI: 6\n[  461.081327] sd 0:0:0:0: [sda] 60929280 512-byte logical blocks: (31.2 GB/29.1 GiB)\n[  461.093654] sd 0:0:0:0: [sda] Write Protect is off\n[  461.100343] sd 0:0:0:0: [sda] Mode Sense: 45 00 00 00\n[  461.101667] sd 0:0:0:0: [sda] Write cache: disabled, read cache: enabled, doesnt support DPO or FUA\n[  461.114459] sd 0:0:0:0: Attached scsi generic sg0 type 0\n[  463.171778]  sda: sda1\n[  463.182905] sd 0:0:0:0: [sda] Attached SCSI removable disk  You'll notice the  sda  monikers there. That would be the  /dev/sda  that we're looking for. So, the newest USB device has been assigned  /dev/sda  on my machine. Now, of course, yours might be different. You never know.  Or, if you're  dmesg  is stupidly long and you can't find it quickly, you can always  sudo dmesg | grep sd[a-z] .  grep  being a searching program and the  sd[a-z]  being whats called a \"regex\" search. Basically, grep takes  sd  then adds each letter from a-z to the end and searches for those terms. It then will present you with the information, making it easier for you to find things. The same thing works with  [0-9]  as well. I like to use it to delete a large amount of log files that tend to build up inside of  /var/log .  sudo rm ./*.[0-9].*  or what have you.", 
            "title": "Find the USB Drive"
        }, 
        {
            "location": "/rpi/boot-from-usb/#install-adafruits-usb-program", 
            "text": "Next, to continue the USB bootable instructional.... You want to add Adafruit's Linux Repo to your apt-get stuffs. You can either:  curl -sLS https://apt.adafruit.com/add | sudo bash  which will automatically add their repo and do a  sudo apt-get update  for you. Or, you can go the long way round:  First, adding the repo to your  sources.list  echo \"deb http://apt.adafruit.com/raspbian/ wheezy main\" | sudo tee --append /etc/apt/sources.list  Then, grabbing their gpg key:  wget -O - -q https://apt.adafruit.com/apt.adafruit.com.gpg.key | sudo apt-key add -  And then run  sudo apt-get update .  Next, you'll want to install:  sudo apt-get install adafruit-pi-externalroot-helper  Thats their program for having your RPI run off of an external USB.  Then, to run the program:  sudo adafruit-pi-externalroot-helper -d /dev/sda  replacing the  /dev/sda  with whatever your USB drive is sitting at. Make SURE you get this right, as you don't want to really wipe your SD card. Though I'm fairly certain not only would that not work, it luckily is an easy fix to get your RPI software back on it again.... Unless you've been using it a while.  This program does take at least a few minutes to run through. You'll need to restart your RPI as well once its finished.  It will give you a series of messages once its done. Make sure to read through them, in case there are any errors. It also tells you how to make sure it worked:  [boot config] Ok, your system should be ready. You may wish to check:\n[boot config]   /mnt/etc/fstab\n[boot config]   /boot/cmdline.txt\n[boot config] Your new root drive is currently accessible under /mnt.\n[boot config] In order to restart with this drive at /, please type:\n[boot config] sudo reboot  The key lines are:  Ok, your system should be ready. You may wish to check:\n    /mnt/etc/fstab\n    /boot/cmdline.txt  It really means you need to check  /etc/fstab . Not sure why they included the extra  /mnt  in there.  My  /etc/fstab  now shows:  /dev/mmcblk0p1 /boot vfat defaults 0 2\n#/dev/mmcblk0p2 / ext4 errors=remount-ro,noatime,nodiratime,commit=120 0 1\ntmpfs /tmp tmpfs defaults,nodev,nosuid 0 0\n/dev/disk/by-uuid/94551cfd-d0fc-42df-b742-b7a6434c0d8a    /   ext4    defaults,noatime  0       1  Notice the commented out line  #/dev/mmcblk0p2  That was the original line for the sd card. The line prior was also there before, as the SD card was both the boot media and the OS media. But, now the SD is ONLY the boot, and the external USB is the OS media.  You can also  df -h . This shows your filesystem stuffs. The  -h  being human readable format on the sizes.  Filesystem      Size  Used Avail Use% Mounted on\n/dev/root        29G  1.2G   26G   5% /\ndevtmpfs        483M  4.0K  483M   1% /dev\nnone            4.0K     0  4.0K   0% /sys/fs/cgroup\ntmpfs           487M     0  487M   0% /tmp\nnone             98M  232K   98M   1% /run\nnone            5.0M     0  5.0M   0% /run/lock\nnone            487M     0  487M   0% /run/shm\ncgmfs           100K     0  100K   0% /run/cgmanager/fs\nnone            100M     0  100M   0% /run/user\n/dev/mmcblk0p1   61M   36M   26M  58% /boot\ntmpfs            98M     0   98M   0% /run/user/1000  /dev/root  being the USB drive now. And, it shows the large size of the USB drive as well.", 
            "title": "Install Adafruit's USB Program"
        }, 
        {
            "location": "/rpi/boot-from-usb/#recovering-from-a-failed-boot", 
            "text": "If the RPI should ever not wanna work correctly with the USB drive this way, you can always take the SD card out of your RPI, plug it into your regular machine that you used to install the OS.  Then, open the first partition and find the file  cmdline.txt . Replace the text  root=PARTUUID=....rootdelay=5  with  root=/dev/mmcblk0p2 , which will point the root partition back to the 2nd partition of your SD card. It should roughly look like this:  dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait fbcon=map:10 fbcon=font:VGA8x8  Place the SD card back into the RPI, and it should boot normally.", 
            "title": "Recovering from a failed boot"
        }, 
        {
            "location": "/rpi/domotz-rpi/", 
            "text": "Raspberry Pi:\n\n\nTo install the Domotz agent onto the monitoring hardware:\n\n\nwget https://portal.domotz.com/download/agent_packages/domotz-raspberry-armhf-1.1.2-276.deb\nsudo dpkg -i domotz-raspberry-armhf-1.1.2-276.deb\n\n\n\n\nThen, wait for it to finish, and it will give you the IP address to use to link to your account.\n\n\nOr, you are able to use your iPhone app, on the same network, to run the activation as well.\n\n\n\n\nSee \ndomotz.com\n for information and sign up!", 
            "title": "Domotz RPI"
        }, 
        {
            "location": "/rpi/domotz-rpi/#raspberry-pi", 
            "text": "To install the Domotz agent onto the monitoring hardware:  wget https://portal.domotz.com/download/agent_packages/domotz-raspberry-armhf-1.1.2-276.deb\nsudo dpkg -i domotz-raspberry-armhf-1.1.2-276.deb  Then, wait for it to finish, and it will give you the IP address to use to link to your account.  Or, you are able to use your iPhone app, on the same network, to run the activation as well.   See  domotz.com  for information and sign up!", 
            "title": "Raspberry Pi:"
        }, 
        {
            "location": "/gen_unix/ansible-adhoc/", 
            "text": "Ansible's ad-hoc reference guide\n\n\nYes, I know this is like, the first thing that ansible's \nDocumentation site\n teaches you. But, again, it IS, like, the first thing this massive thing teaches you, and not in too much detail.\n\n\nSo, here's a repeat, refresher, with screenshots!!\n\n\nansible ubuntu -a \"free -m\"\n\n\nThis just runs ansible's \ncommand\n module. As in it doesn't support shell variables and things like piping.\n\n\n\n\nansible all -m ping", 
            "title": "Ansible Adhoc Refresh"
        }, 
        {
            "location": "/gen_unix/ansible-adhoc/#ansibles-ad-hoc-reference-guide", 
            "text": "Yes, I know this is like, the first thing that ansible's  Documentation site  teaches you. But, again, it IS, like, the first thing this massive thing teaches you, and not in too much detail.  So, here's a repeat, refresher, with screenshots!!", 
            "title": "Ansible's ad-hoc reference guide"
        }, 
        {
            "location": "/gen_unix/ansible-adhoc/#ansible-ubuntu-a-free-m", 
            "text": "This just runs ansible's  command  module. As in it doesn't support shell variables and things like piping.", 
            "title": "ansible ubuntu -a \"free -m\""
        }, 
        {
            "location": "/gen_unix/ansible-adhoc/#ansible-all-m-ping", 
            "text": "", 
            "title": "ansible all -m ping"
        }, 
        {
            "location": "/gen_unix/transmission-web-gui/", 
            "text": "Transmission's Web GUI\n\n\nUsing Kettu's Web GUI for Transmission\n\n\nFirst, clone \nKettu's web GUI\n\n\ngit clone https://github.com/endor/kettu.git\n\n\nClone it into whatever location you would like, I personally prefer to keep all of my git repo's in one directory behind my home directory. Specifically \n~/git\n\n\nTransmission web GUI Locations\n\n\nNext, I just prefer to remove the old Transmission Web GUI files and then symlink over the git repo of kettu's GUI.\n\n\nTransmission's web GUI is located at \n/usr/share/transmission/web\n in linux systems.\n\n\nIf you're using OS X and the main Transmission App downloaded from their site, - the Transmission GUI app - the web files are located at \n/Applications/Transmission.app/Contents/Resources/web/\n\n\nsudo service transmission-daemon stop\nsudo rm -r /usr/share/transmission/web\nsudo ln -s ~/git/kettu /usr/share/transmission/web\nsudo service transmission-daemon start\n\n\n\n\nNext, check the web interface to make sure it is actually working.", 
            "title": "Transmission Web GUI Change"
        }, 
        {
            "location": "/gen_unix/transmission-web-gui/#transmissions-web-gui", 
            "text": "", 
            "title": "Transmission's Web GUI"
        }, 
        {
            "location": "/gen_unix/transmission-web-gui/#using-kettus-web-gui-for-transmission", 
            "text": "First, clone  Kettu's web GUI  git clone https://github.com/endor/kettu.git  Clone it into whatever location you would like, I personally prefer to keep all of my git repo's in one directory behind my home directory. Specifically  ~/git", 
            "title": "Using Kettu's Web GUI for Transmission"
        }, 
        {
            "location": "/gen_unix/transmission-web-gui/#transmission-web-gui-locations", 
            "text": "Next, I just prefer to remove the old Transmission Web GUI files and then symlink over the git repo of kettu's GUI.  Transmission's web GUI is located at  /usr/share/transmission/web  in linux systems.  If you're using OS X and the main Transmission App downloaded from their site, - the Transmission GUI app - the web files are located at  /Applications/Transmission.app/Contents/Resources/web/  sudo service transmission-daemon stop\nsudo rm -r /usr/share/transmission/web\nsudo ln -s ~/git/kettu /usr/share/transmission/web\nsudo service transmission-daemon start  Next, check the web interface to make sure it is actually working.", 
            "title": "Transmission web GUI Locations"
        }, 
        {
            "location": "/gen_unix/virtualbox-guest-addition/", 
            "text": "VirtualBox Guest Additions\n\n\nUbuntu Guest Machine\n\n\nsudo apt-get install dkms make gcc -y\n\n\nYou need to make sure that \ndkms\n is installed before any other VirtualBox-like software is installed. \n\n\n\n\nNow, its not 100% the end of the world if you went outta order. Its just easier this way.\n\n\n\n\nNow, on the GUI interface of your VirtualBox running instance, hit \nDevices\n and you \nshould\n see at the bottom of the menu, \nInsert Guest Additions CD Image.\n \n\n\nHit, that, then go back to your running VM.\n\n\nsudo mount /dev/cdrom /media/cdrom\n\n\nIt'll alert you to the fact that the mounted filesystem is read only. You're good to ignore that, and cd into the mounted location, and run the installer.\n\n\ncd /media/cdrom\nsudo sh ./VBoxLinuxAdditions.run\n\n\n\n\nThat \nwill\n take a hot second at least to run the installer. But, once its finished, and there were no error messages, go ahead and restart your machine. Of course, make sure that, any settings that required the Additions be installed, are fully setup before the reboot. Like, any shared folders.\n\n\nNow, you'll need to add the group name \nvboxsf\n to all of the different system and user accounts. \nvboxsf\n is VirtualBoxes way of mounting these directories. \n\n\nIf you have any services with custom user/group names, like \ntransmission-daemon\n, stop those services before the next step please.\n\n\nsudo usermod -aG vboxsf jpartain89\nsudo usermod -aG vboxsf debian-transmission\nsudo usermod -aG vboxsf root\n\n\n\n\nThen, it doesn't really hurt to restart your device. Just to make sure all accounts have signed out and back in again, so they can access any \nvboxsf\n group items.", 
            "title": "VirtualBox Guest Additions on Ubuntu Guest"
        }, 
        {
            "location": "/gen_unix/virtualbox-guest-addition/#virtualbox-guest-additions", 
            "text": "", 
            "title": "VirtualBox Guest Additions"
        }, 
        {
            "location": "/gen_unix/virtualbox-guest-addition/#ubuntu-guest-machine", 
            "text": "sudo apt-get install dkms make gcc -y  You need to make sure that  dkms  is installed before any other VirtualBox-like software is installed.    Now, its not 100% the end of the world if you went outta order. Its just easier this way.   Now, on the GUI interface of your VirtualBox running instance, hit  Devices  and you  should  see at the bottom of the menu,  Insert Guest Additions CD Image.    Hit, that, then go back to your running VM.  sudo mount /dev/cdrom /media/cdrom  It'll alert you to the fact that the mounted filesystem is read only. You're good to ignore that, and cd into the mounted location, and run the installer.  cd /media/cdrom\nsudo sh ./VBoxLinuxAdditions.run  That  will  take a hot second at least to run the installer. But, once its finished, and there were no error messages, go ahead and restart your machine. Of course, make sure that, any settings that required the Additions be installed, are fully setup before the reboot. Like, any shared folders.  Now, you'll need to add the group name  vboxsf  to all of the different system and user accounts.  vboxsf  is VirtualBoxes way of mounting these directories.   If you have any services with custom user/group names, like  transmission-daemon , stop those services before the next step please.  sudo usermod -aG vboxsf jpartain89\nsudo usermod -aG vboxsf debian-transmission\nsudo usermod -aG vboxsf root  Then, it doesn't really hurt to restart your device. Just to make sure all accounts have signed out and back in again, so they can access any  vboxsf  group items.", 
            "title": "Ubuntu Guest Machine"
        }, 
        {
            "location": "/gen_unix/ratom/", 
            "text": "Atom.io Remote Application Terminal Installation\n\n\nsudo curl -o /usr/local/bin/ratom https://raw.githubusercontent.com/aurora/rmate/master/rmate\nsudo chmod +x /usr/local/bin/ratom", 
            "title": "Install Ratom or Remote Atom"
        }, 
        {
            "location": "/gen_unix/ratom/#atomio-remote-application-terminal-installation", 
            "text": "sudo curl -o /usr/local/bin/ratom https://raw.githubusercontent.com/aurora/rmate/master/rmate\nsudo chmod +x /usr/local/bin/ratom", 
            "title": "Atom.io Remote Application Terminal Installation"
        }, 
        {
            "location": "/more_info/bash-if-conditionals/", 
            "text": "Bash If Conditional markers\n\n\n- a file\n\nTrue if file exists.\n\n\n-b file\n\nTrue if file exists and is a block special file.\n\n\n-c file\n\nTrue if file exists and is a character special file.\n\n\n-d file\n\nTrue if file exists and is a directory.\n\n\n-e file\n\nTrue if file exists.\n\n\n-f file\n\nTrue if file exists and is a regular file.\n\n\n-g file\n\nTrue if file exists and its set-group-id bit is set.\n\n\n-h file\n\nTrue if file exists and is a symbolic link.\n\n\n-k file\n\nTrue if file exists and its \"sticky\" bit is set.\n\n\n-p file\n\nTrue if file exists and is a named pipe (FIFO).\n\n\n-r file\n\nTrue if file exists and is readable.\n\n\n-s file\n\nTrue if file exists and has a size greater than zero.\n\n\n-t fd\n\nTrue if file descriptor 'fd' is open and refers to a terminal.\n\n\n-u file\n\nTrue if file exists and its set-user-id bit is set.\n\n\n-w file\n\nTrue if file exists and is writable.\n\n\n-x file\n\nTrue if file exists and is executable.\n\n\n-G file\n\nTrue if file exists and is owned by the effective group id.\n\n\n-L file\n\nTrue if file exists and is a symbolic link.\n\n\n-N file\n\nTrue if file exists and has been modified since it was last read.\n\n\n-O file\n\nTrue if file exists and is owned by the effective user id.\n\n\n-S file\n\nTrue if file exists and is a socket.\n\n\nfile1 -ef file2\n\nTrue if file1 and file2 refer to the same device and inode numbers.\n\n\nfile1 -nt file2\n\nTrue if file1 is newer (according to modification date) than file2, or if file1 exists and file2 does not.\n\n\nfile1 -ot file2\n\nTrue if file1 is older than file2, or if file2 exists and file1 does not.\n\n\n-o optname\n\nTrue if the shell option optname is enabled. The list of options appears in the description of the -o option to the set builtin (see The Set Builtin).\n\n\n-v varname\n\nTrue if the shell variable varname is set (has been assigned a value).\n\n\n-R varname\n\nTrue if the shell variable varname is set and is a name reference.\n\n\n-z string\n\nTrue if the length of string is zero.\n\n\n-n string\n\n\nstring\n\nTrue if the length of string is non-zero.\n\n\nstring1 == string2\n\n\nstring1 = string2\n\nTrue if the strings are equal. When used with the [[ command, this performs pattern matching as described above (see Conditional Constructs).\n\n\n\u2018=\u2019 should be used with the test command for POSIX conformance.\n\n\nstring1 != string2\n\nTrue if the strings are not equal.\n\n\nstring1 \n string2\n\nTrue if string1 sorts before string2 lexicographically.\n\n\nstring1 \n string2\n\nTrue if string1 sorts after string2 lexicographically.\n\n\narg1 OP arg2\n\nOP is one of \u2018-eq\u2019, \u2018-ne\u2019, \u2018-lt\u2019, \u2018-le\u2019, \u2018-gt\u2019, or \u2018-ge\u2019. These arithmetic binary operators return true if arg1 is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to arg2, respectively. Arg1 and arg2 may be positive or negative integers.", 
            "title": "Bash IF Conditionals"
        }, 
        {
            "location": "/more_info/bash-if-conditionals/#bash-if-conditional-markers", 
            "text": "- a file \nTrue if file exists.  -b file \nTrue if file exists and is a block special file.  -c file \nTrue if file exists and is a character special file.  -d file \nTrue if file exists and is a directory.  -e file \nTrue if file exists.  -f file \nTrue if file exists and is a regular file.  -g file \nTrue if file exists and its set-group-id bit is set.  -h file \nTrue if file exists and is a symbolic link.  -k file \nTrue if file exists and its \"sticky\" bit is set.  -p file \nTrue if file exists and is a named pipe (FIFO).  -r file \nTrue if file exists and is readable.  -s file \nTrue if file exists and has a size greater than zero.  -t fd \nTrue if file descriptor 'fd' is open and refers to a terminal.  -u file \nTrue if file exists and its set-user-id bit is set.  -w file \nTrue if file exists and is writable.  -x file \nTrue if file exists and is executable.  -G file \nTrue if file exists and is owned by the effective group id.  -L file \nTrue if file exists and is a symbolic link.  -N file \nTrue if file exists and has been modified since it was last read.  -O file \nTrue if file exists and is owned by the effective user id.  -S file \nTrue if file exists and is a socket.  file1 -ef file2 \nTrue if file1 and file2 refer to the same device and inode numbers.  file1 -nt file2 \nTrue if file1 is newer (according to modification date) than file2, or if file1 exists and file2 does not.  file1 -ot file2 \nTrue if file1 is older than file2, or if file2 exists and file1 does not.  -o optname \nTrue if the shell option optname is enabled. The list of options appears in the description of the -o option to the set builtin (see The Set Builtin).  -v varname \nTrue if the shell variable varname is set (has been assigned a value).  -R varname \nTrue if the shell variable varname is set and is a name reference.  -z string \nTrue if the length of string is zero.  -n string  string \nTrue if the length of string is non-zero.  string1 == string2  string1 = string2 \nTrue if the strings are equal. When used with the [[ command, this performs pattern matching as described above (see Conditional Constructs).  \u2018=\u2019 should be used with the test command for POSIX conformance.  string1 != string2 \nTrue if the strings are not equal.  string1   string2 \nTrue if string1 sorts before string2 lexicographically.  string1   string2 \nTrue if string1 sorts after string2 lexicographically.  arg1 OP arg2 \nOP is one of \u2018-eq\u2019, \u2018-ne\u2019, \u2018-lt\u2019, \u2018-le\u2019, \u2018-gt\u2019, or \u2018-ge\u2019. These arithmetic binary operators return true if arg1 is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to arg2, respectively. Arg1 and arg2 may be positive or negative integers.", 
            "title": "Bash If Conditional markers"
        }
    ]
}